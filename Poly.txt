import java.lang.Math;
 class Polynomial implements IPolynomialSolver {
    static DoubleLinkedList Ac = new DoubleLinkedList();
    static DoubleLinkedList Bc = new DoubleLinkedList();
    static DoubleLinkedList Cc = new DoubleLinkedList();
   static DoubleLinkedList Rc = new DoubleLinkedList();
    static DoubleLinkedList Ae = new DoubleLinkedList();
    static DoubleLinkedList Be = new DoubleLinkedList();
   static DoubleLinkedList Ce = new DoubleLinkedList();
   static DoubleLinkedList Re = new DoubleLinkedList();

    @Override
    public void setPolynomial(char poly, int[][] terms) {

        if (poly == 'A') {
            for (int i = 0; i < terms.length; i++) {
                Ac.add(terms[i][0]);
                Ae.add(terms[i][1]);
            }
        } else if (poly == 'B') {

            for (int i = 0; i < terms.length; i++) {
                Bc.add(terms[i][0]);
                Be.add(terms[i][1]);
            }
        } else if (poly == 'C') {
            for (int i = 0; i < terms.length; i++) {
                Cc.add(terms[i][0]);
                Ce.add(terms[i][1]);
            }
        } else throw new IllegalArgumentException("Unrcognisable poly");

    }
    //@Override
   public static String print(char poly){
       String string=new String("");
       if(poly=='A'){

            for (int i=0;i<Ac.size;i++){
                if((int) Ac.get(i)>0) {
                    if (i != 0) string = string + "+";
                }
                else if((int) Ac.get(i)==0)
                    continue;
                if((int)Ae.get(i)>1) {
                    if((int)Ac.get(i)==1 || (int)Ac.get(i)==-1)
                        if((int)Ac.get(i)==-1)
                        string = string + "-X^"+Ae.get(i);
                        else
                            string = string + "X^"+Ae.get(i);
                    else
                        string = string + Ac.get(i) + "X^"+Ae.get(i);
                }
                else  if((int)Ae.get(i)==1) {

                    if((int)Ac.get(i)==1 || (int)Ac.get(i)==-1)
                        if((int)Ac.get(i)==-1)
                        string = string + "-X";
                        else
                            string = string + "X";
                    else
                        string = string + Ac.get(i) + "X";
                }
                else
                    string=string+Ac.get(i);
            }

       }
       else if(poly=='B'){
           for (int i=0;i<Bc.size;i++){
               if((int) Bc.get(i)>0) {
                   if (i != 0) string = string + "+";
               }
               else if((int) Bc.get(i)==0)
                   continue;
               if((int)Be.get(i)>1) {
                   if((int)Bc.get(i)==1 || (int)Bc.get(i)==-1)
                       if((int)Bc.get(i)==-1)
                           string = string + "-X^"+Be.get(i);
                       else
                           string = string + "X^"+Be.get(i);
                   else
                       string = string + Bc.get(i) + "X^"+Be.get(i);
               }
               else  if((int)Be.get(i)==1) {

                   if((int)Bc.get(i)==1 || (int)Bc.get(i)==-1)
                       if((int)Bc.get(i)==-1)
                           string = string + "-X";
                       else
                           string = string + "X";
                   else
                       string = string + Ac.get(i) + "X";
               }
               else
                   string=string+Bc.get(i);
           }
       }
       else if(poly=='C'){
           for (int i=0;i<Cc.size;i++){
               if((int) Cc.get(i)>0) {
                   if (i != 0) string = string + "+";
               }
               else if((int) Cc.get(i)==0)
                   continue;
               if((int)Ce.get(i)>1) {
                   if((int)Cc.get(i)==1 || (int)Cc.get(i)==-1)
                       if((int)Cc.get(i)==-1)
                           string = string + "-X^"+Ce.get(i);
                       else
                           string = string + "X^"+Ce.get(i);
                   else
                       string = string + Cc.get(i) + "X^"+Ce.get(i);
               }
               else  if((int)Ce.get(i)==1) {

                   if((int)Cc.get(i)==1 || (int)Cc.get(i)==-1)
                       if((int)Cc.get(i)==-1)
                           string = string + "-X";
                       else
                           string = string + "X";
                   else
                       string = string + Cc.get(i) + "X";
               }
               else
                   string=string+Cc.get(i);
           }
       }else if(poly=='R'){
           for (int i=0;i<Rc.size;i++){
               if((int) Rc.get(i)>0) {
                   if (i != 0) string = string + "+";
               }
               else if((int) Rc.get(i)==0)
                   continue;
               if((int)Re.get(i)>1) {
                   if((int)Rc.get(i)==1 || (int)Rc.get(i)==-1)
                       if((int)Rc.get(i)==-1)
                           string = string + "-X^"+Re.get(i);
                       else
                           string = string + "X^"+Re.get(i);
                   else
                       string = string + Rc.get(i) + "X^"+Re.get(i);
               }
               else  if((int)Re.get(i)==1) {

                   if((int)Rc.get(i)==1 || (int)Rc.get(i)==-1)
                       if((int)Rc.get(i)==-1)
                           string = string + "-X";
                       else
                           string = string + "X";
                   else
                       string = string + Rc.get(i) + "X";
               }
               else
                   string=string+Rc.get(i);
           }
       }
       else throw new IllegalArgumentException("Wrong poly name");

        return string;
    }
    @Override
    public void clearPolynomial(char poly) {
        if(poly=='A'){
            Ae.clear();
            Ac.clear();
        }
        else if(poly=='B'){
            Be.clear();
            Bc.clear();
        }
        else if(poly=='C'){
            Ce.clear();
            Cc.clear();
        }else throw new IllegalArgumentException("Wrong Entry");
    }

     @Override
     public float evaluatePolynomial(char poly, float value) {
         float f=0;
         if(poly=='A'){
             for(int i=0;i<Ac.size;i++){
                 f += (float) Ac.get(i)*Math.pow(value,(double)Ae.get(i));
             }
         }else if(poly=='B'){
             for(int i=0;i<Bc.size;i++){
                 f += (float) Bc.get(i)*Math.pow(value,(double)Be.get(i));
             }
         }else if(poly=='C'){
             for(int i=0;i<Cc.size;i++){
                 f += (float) Cc.get(i)*Math.pow(value,(double)Ce.get(i));
             }
         }else throw new IllegalArgumentException("Wrong index");
         return f;

     }

     @Override
     public int[][] add(char poly1, char poly2) {
         if(poly1=='A'&&poly2=='B'){
             add(Ac,Bc,Ae,Be);
         }else if(poly1=='A'&&poly2=='A'){
             add(Ac,Ac,Ae,Ae);
         }else if(poly1=='A'&&poly2=='C'){
             add(Ac,Cc,Ae,Ce);
         }else if(poly1=='B'&&poly2=='B'){
             add(Bc,Bc,Be,Be);
         }else if(poly1=='B'&&poly2=='C'){
             add(Bc,Cc,Be,Ce);
         }else if(poly1=='C'&&poly2=='C'){
             add(Cc,Cc,Ce,Ce);
         }
         int[][] arr = new int[Rc.size][2];
         for(int i=0;i<Rc.size;i++){
             arr[i][0]=(int) Rc.get(i);
             arr[i][1]=(int) Re.get(i);
         }
        return arr;
     }
     public static void add(DoubleLinkedList list1c,DoubleLinkedList list2c,DoubleLinkedList list1e,DoubleLinkedList list2e){
            Re.clear();
            Rc.clear();
         DoubleLinkedList.DNode tmp1e=list1e.head;
         DoubleLinkedList.DNode tmp2e=list2e.head;
         DoubleLinkedList.DNode tmp1c=list1c.head;
         DoubleLinkedList.DNode tmp2c=list2c.head;
         while (tmp1e != null && tmp2e != null) {
             if ((int) tmp1e.element > (int) tmp2e.element) {
                 Re.add(tmp1e.element);
                 Rc.add(tmp1c.element);
                 tmp1c = tmp1c.Next;
                 tmp1e = tmp1e.Next;

             } else if ((int) tmp1e.element < (int) tmp2e.element) {
                 Re.add(tmp2e.element);
                 Rc.add(tmp2c.element);
                 tmp2c = tmp2c.Next;
                 tmp2e = tmp2e.Next;
             } else {
                 int sum = (int) tmp1c.element + (int) tmp2c.element;
                 Re.add(tmp1e.element);
                 Rc.add(sum);
                 tmp2c = tmp2c.Next;
                 tmp2e = tmp2e.Next;
                 tmp1c = tmp1c.Next;
                 tmp1e = tmp1e.Next;
             }
         }
                while (tmp1e!=null){
                    Re.add(tmp2e.element);
                    Rc.add(tmp2c.element);
                    tmp1c=tmp1c.Next;
                    tmp1e=tmp1e.Next;

                }
                while (tmp2e!=null){
                    Re.add(tmp2e.element);
                    Rc.add(tmp2c.element);
                    tmp2c=tmp2c.Next;
                    tmp2e=tmp2e.Next;
                }
         }
        public  int[][] subtract(char poly1, char poly2){

            if(poly1=='A'&&poly2=='B'){
                subtract(Ac,Bc,Ae,Be);
            }else if(poly1=='A'&&poly2=='A'){
                subtract(Ac,Ac,Ae,Ae);
            }else if(poly1=='A'&&poly2=='C'){
                subtract(Ac,Cc,Ae,Ce);
            }else if(poly1=='B'&&poly2=='B'){
                subtract(Bc,Bc,Be,Be);
            }else if(poly1=='B'&&poly2=='C'){
                subtract(Bc,Cc,Be,Ce);
            }else if(poly1=='C'&&poly2=='C'){
                subtract(Cc,Cc,Ce,Ce);
            }else if(poly1=='C'&&poly2=='B'){
                subtract(Cc,Bc,Ce,Be);
            }else if(poly1=='B'&&poly2=='A'){
                subtract(Bc,Ac,Be,Ae);
            }else if(poly1=='C'&&poly2=='A'){
                subtract(Cc,Ac,Ce,Ae);
            }
            int[][] arr = new int[Rc.size][2];
            for(int i=0;i<Rc.size;i++){
                arr[i][0]=(int) Rc.get(i);
                arr[i][1]=(int) Re.get(i);
            }
            return arr;

        }
     public static void subtract(DoubleLinkedList list1c,DoubleLinkedList list2c,DoubleLinkedList list1e,DoubleLinkedList list2e){
         Re.clear();
         Rc.clear();
         DoubleLinkedList.DNode tmp1e=list1e.head;
         DoubleLinkedList.DNode tmp2e=list2e.head;
         DoubleLinkedList.DNode tmp1c=list1c.head;
         DoubleLinkedList.DNode tmp2c=list2c.head;
         while (tmp1e != null && tmp2e != null) {
             if ((int) tmp1e.element > (int) tmp2e.element) {
                 Re.add(tmp1e.element);
                 Rc.add(tmp1c.element);
                 tmp1c = tmp1c.Next;
                 tmp1e = tmp1e.Next;

             } else if ((int) tmp1e.element < (int) tmp2e.element) {
                 Re.add(-1*(int)tmp2e.element);
                 Rc.add(-1*(int)tmp2c.element);
                 tmp2c = tmp2c.Next;
                 tmp2e = tmp2e.Next;
             } else {
                 int sum = (int) tmp1c.element - (int) tmp2c.element;
                 Re.add(tmp1e.element);
                 Rc.add(sum);
                 tmp2c = tmp2c.Next;
                 tmp2e = tmp2e.Next;
                 tmp1c = tmp1c.Next;
                 tmp1e = tmp1e.Next;
             }
         }
         while (tmp1e!=null){
             Re.add(tmp2e.element);
             Rc.add(tmp2c.element);
             tmp1c=tmp1c.Next;
             tmp1e=tmp1e.Next;

         }
         while (tmp2e!=null){
             Re.add(-1*(int)tmp2e.element);
             Rc.add(-1*(int)tmp2c.element);
             tmp2c=tmp2c.Next;
             tmp2e=tmp2e.Next;
         }
     }



     /*public static void main(String[] argv){
        Ae.add(3);
        Ac.add(1);
        Ae.add(2);
        Ac.add(-1);
        Ac.add(-1);
        Ae.add(1);

         Be.add(2);
         Bc.add(-1);
         Bc.add(-1);
         Be.add(1);
         Bc.add(2);
         Be.add(0);

         subtract(Ac,Bc,Ae,Be);
         String a = print('A');
         String b=  print('B');

        String s = print('R');
        System.out.println("A : "+a);
         System.out.println("B: "+b);
        System.out.println("A-B: "+s);
     }*/
 }